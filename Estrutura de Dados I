Questão 01 - Questão 1
i = 0:
temp = vetor[0] = 0
vetor[0] = vetor[9-0] = vetor[9] = 9
vetor[9] = temp = 0

i = 1
temp = vetor[1] = 1
vetor[1] = vetor[9-1] = vetor[8] = 8
vetor[8] = temp = 1

i = 2
temp = vetor[2] = 2
vetor[2] = vetor[9-2] = vetor[7] = 7
vetor[7] = temp = 2

i = 3 
temp = vetor[3] = 3
vetor[3] = vetor[9-3] = vetor[6] = 6
vetor[6] = temp = 3

i = 4
temp = vetor[4] = 4
vetor[4] = vetor[9-4] = vetor[5] = 5
vetor[5] = temp = 4

i = 5 
temp = vetor[5] = 5
vetor[5] = vetor[9-5] = vetor[4] = 4
vetor[4] = temp = 5

i = 6
temp = vetor[6] = 6
vetor[6] = vetor[9-6] = vetor[3] = 3
vetor[3] = temp = 6

i = 7
temp = vetor[7] = 7
vetor[7] = vetor[9-7] = vetor[2] = 2
vetor[2] = temp = 7

i = 8
temp = vetor[8] = 8
vetor[8] = vetor[9-8] = vetor[1] = 1
vetor[1] = temp = 8

i = 9
temp = vetor[9] = 9
vetor[9] = vetor[9-9] = vetor[0] = 0
vetor[0] = temp = 9

vetor = {9,8,7,6,5,4,3,2,1,0}

Questão 02 - QUESTÃO 2:
#include <stdio.h>
int estaOrdenado(int vetor[], int tamanho) {
    for (int i = 0; i < tamanho - 1; i++) {
        if (vetor[i] > vetor[i + 1]) {
            return 0; 
        }
    }
    return 1; 
}
int main() {
    int N;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Tamanho do vetor inválido.\n");
        return 1;
    }

    int vetor[N];

    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < N; i++) {
        scanf("%d", &vetor[i]);
    }

    if (estaOrdenado(vetor, N)) {
        printf("SIM\n");
    } else {
        printf("NAO\n");
    }

    return 0;
}

Questão 03 - #include <iostream>

using namespace std;

// Função para imprimir o tabuleiro
void imprimirTabuleiro(char tabuleiro[3][3]) {
    cout << "  1 2 3" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << i + 1 << " ";
        for (int j = 0; j < 3; ++j) {
            cout << tabuleiro[i][j] << " ";
        }
        cout << endl;
    }
}

// Função para verificar se houve um vencedor
char verificarVencedor(char tabuleiro[3][3]) {
    // Verificação das linhas e colunas
    for (int i = 0; i < 3; ++i) {
        if (tabuleiro[i][0] != ' ' && tabuleiro[i][0] == tabuleiro[i][1] && tabuleiro[i][0] == tabuleiro[i][2]) {
            return tabuleiro[i][0]; // Retorna o vencedor
        }
        if (tabuleiro[0][i] != ' ' && tabuleiro[0][i] == tabuleiro[1][i] && tabuleiro[0][i] == tabuleiro[2][i]) {
            return tabuleiro[0][i]; // Retorna o vencedor
        }
    }
    // Verificação das diagonais
    if (tabuleiro[0][0] != ' ' && tabuleiro[0][0] == tabuleiro[1][1] && tabuleiro[0][0] == tabuleiro[2][2]) {
        return tabuleiro[0][0]; // Retorna o vencedor
    }
    if (tabuleiro[0][2] != ' ' && tabuleiro[0][2] == tabuleiro[1][1] && tabuleiro[0][2] == tabuleiro[2][0]) {
        return tabuleiro[0][2]; // Retorna o vencedor
    }
    // Caso não haja vencedor ainda
    return ' ';
}

int main() {
    char tabuleiro[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
    char jogador = 'X';
    int linha, coluna;
    char vencedor = ' ';

    cout << "Bem-vindo ao Jogo da Velha!" << endl;

    while (vencedor == ' ') {
        imprimirTabuleiro(tabuleiro);
        cout << "Jogador " << jogador << ", é sua vez." << endl;
        cout << "Digite a linha (1 a 3): ";
        cin >> linha;
        cout << "Digite a coluna (1 a 3): ";
        cin >> coluna;

        // Verifica se a posição está disponível
        if (tabuleiro[linha - 1][coluna - 1] == ' ') {
            tabuleiro[linha - 1][coluna - 1] = jogador;
            vencedor = verificarVencedor(tabuleiro);
            // Troca de jogador
            jogador = (jogador == 'X') ? 'O' : 'X';
        } else {
            cout << "Posição já ocupada. Tente novamente." << endl;
        }
    }

    // Imprime o tabuleiro final
    imprimirTabuleiro(tabuleiro);

    // Verifica o vencedor
    if (vencedor != ' ') {
        cout << "Parabéns, jogador " << vencedor << "! Você venceu!" << endl;
    } else {
        cout << "Empate!" << endl;
    }

    return 0;
}

Questão 04 -
#include <stdio.h>

int main() {
    int matriz[10][10];
    int maiorValor = matriz[0][0], linhaMaior, colunaMaior;

    printf("Digite os elementos da matriz 10x10:\n");
 for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            scanf("%d", &matriz[i][j]);
 if (matriz[i][j] > maiorValor) {
                maiorValor = matriz[i][j];
                linhaMaior = i;
                colunaMaior = j;
            }
        }
    }

    printf("O maior valor encontrado na matriz é %d, na linha %d e coluna %d.\n", maiorValor, linhaMaior + 1, colunaMaior + 1);

    return 0;
}

Questão 05 - #include <stdio.h>

// Definição da estrutura para representar uma banda de música
struct Banda {
    char nome[50];
    char tipoMusica[50];
    int numIntegrantes;
    int posicaoRanking;
};

int main() {
    // Criando uma instância da estrutura para uma banda
    struct Banda minhaBanda;

    // Preenchendo os valores da banda
    printf("Digite o nome da banda: ");
    scanf("%s", minhaBanda.nome);

    printf("Digite o tipo de música da banda: ");
    scanf("%s", minhaBanda.tipoMusica);

    printf("Digite o número de integrantes da banda: ");
    scanf("%d", &minhaBanda.numIntegrantes);

    printf("Digite a posição da banda no seu ranking favorito (1 a 5): ");
    scanf("%d", &minhaBanda.posicaoRanking);

    // Exibindo os valores da banda
    printf("\nBanda: %s\n", minhaBanda.nome);
    printf("Tipo de música: %s\n", minhaBanda.tipoMusica);
    printf("Número de integrantes: %d\n", minhaBanda.numIntegrantes);
    printf("Posição no ranking favorito: %d\n", minhaBanda.posicaoRanking);

    return 0;
}

Questão 06 - Para gerenciar a ordem de execução de processos e threads em um sistema operacional, uma estrutura de dados ideal seria uma fila de prioridade. Nessa estrutura, os elementos são organizados com base em suas prioridades, permitindo que o sistema escolha o próximo elemento a ser executado com eficiência, dando preferência aos mais prioritários. 

Questão 07 - Para implementar uma função que desfaça ou refaça a última ação tomada em um sistema, uma estrutura de dados adequada seria uma pilha. Nesta estrutura, os elementos são inseridos e removidos seguindo o princípio Last-In-First-Out (LIFO), o que significa que a última ação executada é a primeira a ser desfeita ou refeita. A pilha oferece uma abordagem simples e eficiente para rastrear o histórico de ações, facilitando o controle das operações de desfazer e refazer de forma sequencial.

Questão 08 - #include <iostream>

using namespace std;

// Função para trocar os valores das variáveis usando ponteiros
void trocarValores(int *ptr1, int *ptr2) {
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}

int main() {
    int a = 5;
    int b = 10;

    cout << "Valores antes da troca:" << endl;
    cout << "a = " << a << ", b = " << b << endl;

    // Chama a função para trocar os valores
    trocarValores(&a, &b);

    cout << "Valores depois da troca:" << endl;
    cout << "a = " << a << ", b = " << b << endl;

    return 0;
}
